PARSER_BEGIN(Parser)

public class Parser {
    public static void main(String[] args) throws Exception {
        Exp result = new Parser(new java.io.StringReader(args[0])).S();
        System.out.println(result);
    }
}

// Classes defining the Abstract Syntax Tree
abstract class Exp {}
class Num extends Exp {
    int value;
    Num(int v) {value = v;}
    public String toString() {return value + "";}
}
class BinaryExp extends Exp {
    String op;
    Exp left, right;
    BinaryExp(String o, Exp l, Exp r) {op = o; left = l; right = r;}
    public String toString() {return "(" + op + " " + left + " " + right + ")";}
}
class IdExp extends Exp {
    IdExp(){}
    public String toString() {return "ID";}
}

PARSER_END(Parser)

SKIP:  { " " | "\t" | "\n" | "\r"                    }
TOKEN: { "(" | ")" | "+" | "*" | <NUM: (["0"-"9"])+> | <ID: ["a"-"z", "A"-"Z", "_"](["a"-"z", "A"-"Z", "0"-"9", "_"])*> }

Exp S(): {Exp e;}
{
  e=E() <EOF> {return e;}
}

Exp E(): {Exp e1; Exp e2; Token i;}
{
  e1=T() ("+" e2=T() {e1 = new BinaryExp("+", e1, e2);} )* {return e1;}
|
  i=<ID> {return new IdExp();}
}

Exp T(): {Exp e1; Exp e2;}
{
  e1=F() ("*" e2=F() {e1 = new BinaryExp("*", e1, e2);} )* {return e1;}
}

Exp F(): {Exp e; Token n;}
{
  n=<NUM> {return new Num(Integer.parseInt(n.image));}
|
  "(" e=E() ")" {return e;}
}
