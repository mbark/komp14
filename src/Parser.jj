PARSER_BEGIN(Parser)

import mjc.Exp;
import mjc.Num;
import mjc.BinaryExp;
import mjc.IdExp;

public class Parser {
    public static void main(String[] args) throws Exception {
        try {
            new Parser(new java.io.StringReader(args[0])).S();
            System.out.println("Syntax is okay");
        } catch (Throwable e) {
            System.out.println("Syntax check failed: " + e.getMessage());
        }
    }
}

PARSER_END(Parser)

SKIP: {
    " " |
    "\t" |
    "\n" |
    "\r"
}

/* Reserved keywords. */
TOKEN: {
    <BOOLEAN: "boolean"> |
    <CLASS: "class"> |
    <ELSE: "else"> |
    <IF: "if"> |
    <INT: "int"> |
    <LENGTH: "length"> |
    <NEW: "new"> |
    <PUBLIC: "public"> |
    <RETURN: "return"> |
    <STATIC: "static"> |
    <STRING: "String"> |
    <THIS: "this"> |
    <VOID: "void"> |
    <WHILE: "while">
}

/* Operators etc. */
TOKEN: {
    "." | "," | ";" |
    "+" | "-" | "*" |
    "<" |
    "!" | "&&" |
    "(" | ")" | "[" | "]" | "{" | "}"
}

/* Literals and identifiers. */
TOKEN: {
    <TRUE: "true"> |
    <FALSE: "false"> |
    <INT_LIT: "0" | ["1"-"9"](["0"-"9"])*> |
    <ID: ["a"-"z", "A"-"Z", "_"](["a"-"z", "A"-"Z", "0"-"9", "_"])*>
}

void S(): {}
{
    MainClass() ( ClassDecl() )* <EOF>
}

void MainClass(): {}
{
    <CLASS> <ID>
    "{"
        <PUBLIC> <STATIC> <VOID> <ID> "(" <STRING> "[" "]" <ID> ")"
        "{"
            (
                LOOKAHEAD(2)
                VarDecl()
            )*
            ( Stmt() )*
        "}"
    "}"
}

void ClassDecl(): {}
{
    <CLASS> <ID>
    "{"
        ( VarDecl() )* ( MethodDecl() )*
    "}"
}

void VarDecl(): {}
{
    Type() <ID> ";"
}

void MethodDecl(): {}
{
    <PUBLIC> Type() <ID> "(" FormalList() ")"
    "{"
        (
            LOOKAHEAD(2)
            VarDecl()
        )*
        ( Stmt() )*
        <RETURN> Exp() ";"
    "}"
}

void FormalList(): {}
{
    Type() <ID> ( FormalRest() )*
|
    {}
}

void FormalRest(): {}
{
    "," Type() <ID>
}

void Type(): {}
{
    <INT> ( "[" "]" )?
|
    <BOOLEAN>
|
    <ID>
}

void Stmt(): {}
{
    "{" ( Stmt() )* "}"
|
    <IF> "(" Exp() ")" Stmt() <ELSE> Stmt()
|
    <WHILE> "(" Exp() ")" Stmt()
|
    "System.out.println" "(" Exp() ")" ";"
|
    <ID> (
        "=" Exp() |
        "[" Exp() "]" "=" Exp()
    )
    ";"
}

void Exp(): {}
{
    Relational() ExpPrim()
}

// FIXME: Doesn't work properly
void ExpPrim(): {}
{
    "&&" Exp()
|
    (
        "." (
            <ID> "(" ExpList() ")" |
            <LENGTH>
        ) |
        "[" Exp() "]"
    )
|
    {}
}

void ExpList(): {}
{
    Exp() ( ExpRest() )*
|
    {}
}

void ExpRest(): {}
{
    "," Exp()
}

void Relational(): {}
{
    Additive() RelationalPrim()
}

void RelationalPrim(): {}
{
    "<" Relational()
|
    {}
}

void Additive(): {}
{
    Multiplicative() AdditivePrim()
}

void AdditivePrim(): {}
{
    "+" Additive()
|
    "-" Additive()
|
    {}
}

void Multiplicative(): {}
{
    ExpTerminator() MultiplicativePrim()
}

void MultiplicativePrim(): {}
{
    "*" Multiplicative()
|
    {}
}

void ExpTerminator(): {}
{
    <INT_LIT>
|
    <TRUE>
|
    <FALSE>
|
    <ID>
|
    <THIS>
|
    <NEW> (<INT> "[" Exp() "]" | <ID> "(" ")")
|
    "!" Exp()
|
    "(" Exp() ")"
}
