PARSER_BEGIN(Parser)

import mjc.Exp;
import mjc.Num;
import mjc.BinaryExp;
import mjc.IdExp;

public class Parser {
    public static void main(String[] args) throws Exception {
        try {
            new Parser(new java.io.StringReader(args[0])).S();
            System.out.println("Syntax is okay");
        } catch (Throwable e) {
            System.out.println("Syntax check failed: " + e.getMessage());
        }
    }
}

PARSER_END(Parser)

SKIP: {
    " " |
    "\t" |
    "\n" |
    "\r"
}

TOKEN: {
    <TRUE: "true"> |
    <FALSE: "false"> |
    <THIS: "this"> |
    <NEW: "new"> |
    <INT: "int"> |
    <LENGTH: "length"> |
    "." | "," |
    "+" | "-" | "*" |
    "<" |
    "!" | "&&" |
    "(" | ")" | "[" | "]" | "{" | "}" |
    <INT_LIT: "0" | ["1"-"9"](["0"-"9"])*> |
    <ID: ["a"-"z", "A"-"Z", "_"](["a"-"z", "A"-"Z", "0"-"9", "_"])*>
}

void S(): {}
{
    Exp() <EOF>
}

void Exp(): {}
{
    Relational() ExpPrim()
}


void ExpPrim(): {}
{
    "&&" Exp()
|
    (
        "." (
            <ID> "(" ExpList() ")" |
            <LENGTH>
        ) |
        "[" Exp() "]"
    )*
}

void ExpList(): {}
{
    Exp() ( ExpRest() )*
|
    {}
}

void ExpRest(): {}
{
    "," Exp()
}

void Relational(): {}
{
    Additive() RelationalPrim()
}

void RelationalPrim(): {}
{
    "<" Relational()
|
    {}
}

void Additive(): {}
{
    Multiplicative() AdditivePrim()
}

void AdditivePrim(): {}
{
    "+" Additive()
|
    "-" Additive()
|
    {}
}

void Multiplicative(): {}
{
    ExpTerminator() MultiplicativePrim()
}

void MultiplicativePrim(): {}
{
    "*" Multiplicative()
|
    {}
}

void ExpTerminator(): {}
{
    <INT_LIT>
|
    <TRUE>
|
    <FALSE>
|
    <ID>
|
    <THIS>
|
    <NEW> (<INT> "[" Exp() "]" | <ID> "(" ")")
|
    "!" Exp()
|
    "(" Exp() ")"
}
